{"version":3,"sources":["Tabular/table.js","Tabular/main.js","App.js","serviceWorker.js","index.js"],"names":["Column","className","this","props","data","map","item","key","id","value_first","value_second","data-key","onClick","action","sum","Component","Main","calculateSum","e","dataCopy","state","filterId","Number","target","getAttribute","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAyBeA,E,uKAtBL,IAAD,OACP,OACC,2BAAOC,UAAU,iBAChB,+BACGC,KAAKC,MAAMC,KAAKC,KAAI,SAACC,EAAMC,GAAP,OACrB,wBAAIA,IAAKD,EAAKE,IACT,wBAAIP,UAAU,uBAAuBK,EAAKG,aAC1C,wBAAIR,UAAU,uBAAuBK,EAAKI,cAC1C,wBAAIT,UAAU,2BACb,yBAAKA,UAAU,gBACnB,4BAAQU,WAAUL,EAAKE,GAAII,QAAU,EAAKT,MAAMU,QAAhD,YAGG,wBAAIZ,UAAU,uBAAuBK,EAAKQ,e,GAdhCC,aC8BNC,E,kDA5Bd,WAAYb,GAAO,IAAD,8BACjB,cAAMA,IAWPc,aAAe,SAACC,GACf,IAAIC,EAAQ,YAAO,EAAKC,MAAMhB,MAC1BiB,EAAWC,OAAOJ,EAAEK,OAAOC,aAAa,aAC5CL,EAASE,GAAUP,IAAMK,EAASE,GAAUZ,YAAcU,EAASE,GAAUX,aAC7E,EAAKe,SAAS,CAACN,cAdf,EAAKC,MAAQ,CACZhB,KAAM,CACL,CAAEI,GAAI,EAAGC,YAAY,GAAIC,aAAa,GAAII,IAAI,IAC9C,CAAEN,GAAI,EAAGC,YAAY,GAAIC,aAAa,GAAII,IAAI,IAC9C,CAAEN,GAAI,EAAGC,YAAY,GAAIC,aAAa,GAAII,IAAI,IAC9C,CAAEN,GAAI,EAAGC,YAAY,GAAIC,aAAa,GAAII,IAAI,MAP/B,E,qDAoBjB,OACC,oCACC,kBAAC,EAAD,CAAQD,OAASX,KAAKe,aAAeb,KAAMF,KAAKkB,MAAMhB,Y,GAvBvCW,aCSJW,MARf,WACE,OACE,yBAAKzB,UAAU,gBACX,kBAAC,EAAD,QCKY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cebe7781.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Column extends Component{\n\trender(){\n\t\treturn(\n\t\t\t<table className=\"dataContainer\">\n\t\t\t\t<tbody>\n\t\t\t\t\t{ this.props.data.map((item, key) =>\n\t\t\t\t\t\t<tr key={item.id}>\n\t\t\t\t\t      <td className=\"dataContainerColumn\">{item.value_first}</td>\n\t\t\t\t\t      <td className=\"dataContainerColumn\">{item.value_second}</td>\n\t\t\t\t\t      <td className=\"dataContainerManipulate\">\n\t\t\t\t\t\t      <div className=\"submitButton\">\n\t\t\t\t\t\t\t\t<button data-key={item.id} onClick={ this.props.action }>SUBMIT</button>\n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t  </td>\n\t\t\t\t\t      <td className=\"dataContainerColumn\">{item.sum}</td>\n\t\t\t\t\t  \t</tr>\n\t\t\t\t\t)}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t);\n\t}\n}\n\nexport default Column;","import React, { Component } from 'react';\nimport Column from './table';\n\nclass Main extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: [\n\t\t\t\t{ id: 0, value_first:20, value_second:65, sum:'' },\n\t\t\t\t{ id: 1, value_first:30, value_second:15, sum:'' },\n\t\t\t\t{ id: 2, value_first:67, value_second:75, sum:'' },\n\t\t\t\t{ id: 3, value_first:17, value_second:32, sum:'' },\n\t\t\t]\n\t\t}\n\t}\n\n\tcalculateSum = (e) => {\n\t\tlet dataCopy = [...this.state.data];\n\t\tlet filterId = Number(e.target.getAttribute('data-key'));\n\t\tdataCopy[filterId].sum = dataCopy[filterId].value_first + dataCopy[filterId].value_second;\n\t\tthis.setState({dataCopy});\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<>\n\t\t\t <Column action={ this.calculateSum } data={this.state.data} />\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './Tabular/main';\n\nfunction App() {\n  return (\n    <div className=\"AppContainer\">\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}